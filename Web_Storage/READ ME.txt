reference : https://javascript.info/localstorage

-------------------------------------------------------------------------------------------------------------------------------

LocalStorage, sessionStorage
    -> Web storage objects localStorage and sessionStorage allow to save key/value pairs in the browser.
    -> What’s interesting about them is that the data survives a page refresh (for sessionStorage) 
       and even a full browser restart (for localStorage). We’ll see that very soon.

-------------------------------------------------------------------------------------------------------------------------------

We already have cookies. Why additional objects?
    -> Unlike cookies, web storage objects are not sent to server with each request. 
       Because of that, we can store much more.Most browsers allow at least 2 megabytes 
       of data (or more) and have settings to configure that.
    -> Also unlike cookies, the server can’t manipulate storage objects via HTTP headers. 
        Everything’s done in JavaScript.
    -> The storage is bound to the origin (domain/protocol/port triplet). 
       That is, different protocols or subdomains infer different storage objects, 
       they can’t access data from each other.

-------------------------------------------------------------------------------------------------------------------------------

Both storage objects provide same methods and properties:

    setItem(key, value) – store key/value pair.
    getItem(key) – get the value by key.
    removeItem(key) – remove the key with its value.
    clear() – delete everything.
    key(index) – get the key on a given position.
    length – the number of stored items.

    As you can see, it’s like a Map collection (setItem/getItem/removeItem), 
    but also allows to access by index with key(index).
    Let’s see how it works.

-------------------------------------------------------------------------------------------------------------------------------

localStorage demo
    The main features of localStorage are:

    Shared between all tabs and windows from the same origin.
    The data does not expire. It remains after the browser restart and even OS reboot.
        -> see webStorage.js for instructive demo

-------------------------------------------------------------------------------------------------------------------------------

sessionStorage demo
    The sessionStorage object is used much less often than localStorage.

    Properties and methods are the same, but it’s much more limited:

    The sessionStorage exists only within the current browser tab.
    Another tab with the same page will have a different storage.
    But it is shared between iframes in the same tab (assuming they come from the same origin).
    The data survives page refresh, but not closing/opening the tab.
    Let’s see that in action.
        -> see webStorage.js for instructive demo